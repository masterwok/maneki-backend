openapi: "3.0.3"
info:
  title: "maneki_backend API"
  description: "maneki_backend API"
  version: "1.0.0"
servers:
- url: "http://localhost"
paths:
  /articles:
    get:
      description: ""
      parameters:
      - name: "sort"
        in: "query"
        required: false
        schema:
          type: "string"
      responses:
        "200":
          description: "OK <br> call.respond()"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ApiResponse"
  /articles/{id}:
    delete:
      description: "put<Articles.Id> { article -> <br> // Update an article ... <br>\
        \ call.respondText(\"An article with id ${article.id} updated\", status =\
        \ HttpStatusCode.OK) <br> }"
      parameters:
      - name: "sort"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "parent"
        in: "query"
        required: false
        schema:
          type: "object"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK <br> Delete an article ..."
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
    get:
      description: "post<Articles> { <br> // Save an article ... <br> call.respondText(\"\
        An article is saved\", status = HttpStatusCode.Created) <br> }"
      parameters:
      - name: "sort"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "parent"
        in: "query"
        required: false
        schema:
          type: "object"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK <br> Show an article with id ${article.id} ..."
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
  /articles/{id}/edit:
    get:
      description: ""
      parameters:
      - name: "sort"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "parent"
        in: "query"
        required: false
        schema:
          type: "object"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      - name: "parent"
        in: "query"
        required: true
        schema:
          type: "object"
      responses:
        "200":
          description: "OK <br> Show a page with fields for editing an article ..."
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
  /articles/new:
    get:
      description: ""
      parameters:
      - name: "sort"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "parent"
        in: "query"
        required: false
        schema:
          type: "object"
      responses:
        "200":
          description: "OK <br> Show a page with fields for creating a new article\
            \ ..."
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Create a new article"
  /auth:
    post:
      description: "Login to the application."
      responses:
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ApiResponse"
  /auth/refresh:
    post:
      description: "Refresh the authentication access token."
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ApiResponse"
  /health/status:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "OK"
  /user:
    get:
      description: "Get the user information of the user."
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ApiResponse"
    post:
      description: "Create a new user account."
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ApiResponse"
  /json/kotlinx-serialization:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map"
components:
  schemas:
    ApiResponse:
      type: "object"
      properties:
        error:
          type: "string"
    Map:
      type: "object"
      properties: {}
